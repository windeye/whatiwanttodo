# nginx.conf
# 用户和用户组
user deploy;

# 指令指定处理进程的数量。一般推荐为处理器的个数. 可以适当增加，以避免进程在堵塞在IO等待中
worker_processes  4;

# 错误日志[ debug | info | notice | warn | error | crit ] 
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events{
    # 事件模型[ kqueue | rtsig | epoll | /dev/poll | select | poll | eventport ]
    use epoll;

    # 指定 nginx 工作进程的最大连接数量，其与总处理量的关系用公式表达如下：
    #     max_clients = worker_processes * worker_connections
    # 作为反向代理：
    #     max_clients = worker_processes * worker_connections/4
    # 因此这两个数的乘积若大于系统最大可用tcp/ip栈数是没有意义的.
    worker_connections  1024;
}

# HTTP 请求设置
http {
    server_tokens off;

    # 载入mime类型
    include       mime.types;
    # 默认类型
    default_type  application/octet-stream;

    # 访问日志
    access_log  /var/log/nginx/access.log;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on。
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络IO处理速度，降低系统 uptime。
    sendfile        on;

    #tcp_nopush     on;

    keepalive_timeout  65;

    server_names_hash_bucket_size 128;

    client_body_buffer_size 128k;
    client_max_body_size 4M; 

    #gzip  on;

    # 设定负载均衡的服务器列表
    upstream tagslide {
      ip_hash;
      server unix:///var/run/tagslide0.sock; 
      server unix:///var/run/tagslide1.sock;
      server unix:///var/run/tagslide2.sock;
      server unix:///var/run/tagslide3.sock;
    }
    
    # 服务器设置
    server {
        # 监听端口
        listen       80;

        # WEB服务主机名
        server_name  www.tagslide.com tagslide.com; 

        # 字符集
        charset utf-8;
        keepalive_timeout 5;
        root /home/xuliwei/mycode/slide/public;

        access_log /data/log/nginx/nginx.access.log;
        error_log /data/log/nginx/nginx.error.log info;

        location / {
          proxy_pass http://tagslide; # match the name of upstream directive which is defined above
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        #./configure --add-module=/Users/mikewest/Repositories/nginx-static-etags
        location ~* ^/assets/ {
          expires max;
          add_header Cache-Control public;
          add_header Last-Modified "";
          add_header ETag "";
          break;
        }

        location ~* ^/uploads/ {
          expires max;
          add_header Cache-Control public;
          add_header Last-Modified "";
          break;
        }
    }
}
